@code {
    public IEnumerable<VialView> vialViews;

    private VialSet set;
    public VialSet Set
    {
        get
        {
            return set;
        }
        set
        {
            set = value;
            Console.WriteLine("VialSet is set.");
            StateHasChanged();
        }
    }

    private void HandleVialClick(MouseEventArgs e)
    {

    }
}

@functions {
    //public void SetVialSet(VialSet set)
    //{
    //    //vialViews = set.Vials;
    //    //vialViews = new List<VialView>();
    //    //var vialViewList = new List<VialView>();

    //    //foreach (var vial in set.Vials)
    //    //{
    //    //    vialViewList.Add(new VialView());
    //    //}

    //    //vialViews = vialViewList;

    //    //foreach(var vial in set.Vials)
    //    //{
    //    //    //vialViewList.ElementAt()
    //    //}
    //}
}

@if (Set != null)
{
    <div class="marks">
        @foreach (var vial in Set.Vials)
        {
            <div class="mark selected-mark"></div>
        }
    </div>

    <div class="clear"></div>

    var i = 0;

    <div class="vial-set">
        @foreach (var vial in Set.Vials)
        {
            Console.WriteLine("pipi");

            <VialView Vial="@vial" VialIndex="@i" ClickHandler="@(new VialClickedHandler())" />

            i++;
        }
    </div>
    <div class="clear"></div>
}
